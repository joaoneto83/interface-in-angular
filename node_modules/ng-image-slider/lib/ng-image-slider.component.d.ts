import { ChangeDetectorRef, OnInit, OnChanges, DoCheck, SimpleChanges, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { NgImageSliderService } from './ng-image-slider.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgImageSliderComponent implements OnChanges, OnInit, DoCheck, AfterViewInit, OnDestroy {
    private cdRef;
    private platformId;
    imageSliderService: NgImageSliderService;
    private elRef;
    sliderMainDivWidth: number;
    imageParentDivWidth: number;
    imageObj: Array<object>;
    ligthboxImageObj: Array<object>;
    totalImages: number;
    leftPos: number;
    effectStyle: string;
    speed: number;
    sliderPrevDisable: boolean;
    sliderNextDisable: boolean;
    slideImageCount: number;
    sliderImageWidth: number;
    sliderImageReceivedWidth: number | string;
    sliderImageHeight: number;
    sliderImageReceivedHeight: number | string;
    sliderImageSizeWithPadding: number;
    autoSlideCount: number;
    autoSlideInterval: any;
    showArrowButton: boolean;
    textDirection: string;
    imageMargin: number;
    private swipeCoord?;
    private swipeTime?;
    sliderMain: any;
    imageDiv: any;
    imageSize: any;
    infinite: boolean;
    imagePopup: boolean;
    direction: string;
    animationSpeed: number;
    images: Array<object>;
    slideImage: any;
    autoSlide: any;
    showArrow: any;
    videoAutoPlay: boolean;
    paginationShow: boolean;
    arrowKeyMove: boolean;
    manageImageRatio: boolean;
    showVideoControls: boolean;
    imageClick: EventEmitter<number>;
    arrowClick: EventEmitter<string>;
    lightboxArrowClick: EventEmitter<object>;
    lightboxClose: EventEmitter<object>;
    ligthboxShow: boolean;
    activeImageIndex: number;
    visiableImageIndex: number;
    onResize(event: any): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    constructor(cdRef: ChangeDetectorRef, platformId: Object, imageSliderService: NgImageSliderService, elRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    setSliderImages(imgObj: any): void;
    setSliderWidth(): void;
    imageOnClick(index: any): void;
    imageAutoSlide(): void;
    imageMouseEnterHandler(): void;
    prev(): void;
    next(): void;
    prevImg(): void;
    nextImg(): void;
    infinitePrevImg(): void;
    infiniteNextImg(): void;
    getVisiableIndex(): void;
    /**
     * Disable slider left/right arrow when image moving
     */
    sliderArrowDisableTeam(): void;
    nextPrevSliderButtonDisable(): void;
    showLightbox(): void;
    close(): void;
    lightboxArrowClickHandler(event: any): void;
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    swipe(e: TouchEvent, when: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgImageSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgImageSliderComponent, "ng-image-slider", never, { "infinite": "infinite"; "imagePopup": "imagePopup"; "images": "images"; "videoAutoPlay": "videoAutoPlay"; "paginationShow": "paginationShow"; "arrowKeyMove": "arrowKeyMove"; "manageImageRatio": "manageImageRatio"; "showVideoControls": "showVideoControls"; "imageSize": "imageSize"; "direction": "direction"; "animationSpeed": "animationSpeed"; "slideImage": "slideImage"; "autoSlide": "autoSlide"; "showArrow": "showArrow"; }, { "imageClick": "imageClick"; "arrowClick": "arrowClick"; "lightboxArrowClick": "lightboxArrowClick"; "lightboxClose": "lightboxClose"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1pbWFnZS1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBEb0NoZWNrLCBTaW1wbGVDaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdJbWFnZVNsaWRlclNlcnZpY2UgfSBmcm9tICcuL25nLWltYWdlLXNsaWRlci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nSW1hZ2VTbGlkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNkUmVmO1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBpbWFnZVNsaWRlclNlcnZpY2U6IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgZWxSZWY7XG4gICAgc2xpZGVyTWFpbkRpdldpZHRoOiBudW1iZXI7XG4gICAgaW1hZ2VQYXJlbnREaXZXaWR0aDogbnVtYmVyO1xuICAgIGltYWdlT2JqOiBBcnJheTxvYmplY3Q+O1xuICAgIGxpZ3RoYm94SW1hZ2VPYmo6IEFycmF5PG9iamVjdD47XG4gICAgdG90YWxJbWFnZXM6IG51bWJlcjtcbiAgICBsZWZ0UG9zOiBudW1iZXI7XG4gICAgZWZmZWN0U3R5bGU6IHN0cmluZztcbiAgICBzcGVlZDogbnVtYmVyO1xuICAgIHNsaWRlclByZXZEaXNhYmxlOiBib29sZWFuO1xuICAgIHNsaWRlck5leHREaXNhYmxlOiBib29sZWFuO1xuICAgIHNsaWRlSW1hZ2VDb3VudDogbnVtYmVyO1xuICAgIHNsaWRlckltYWdlV2lkdGg6IG51bWJlcjtcbiAgICBzbGlkZXJJbWFnZVJlY2VpdmVkV2lkdGg6IG51bWJlciB8IHN0cmluZztcbiAgICBzbGlkZXJJbWFnZUhlaWdodDogbnVtYmVyO1xuICAgIHNsaWRlckltYWdlUmVjZWl2ZWRIZWlnaHQ6IG51bWJlciB8IHN0cmluZztcbiAgICBzbGlkZXJJbWFnZVNpemVXaXRoUGFkZGluZzogbnVtYmVyO1xuICAgIGF1dG9TbGlkZUNvdW50OiBudW1iZXI7XG4gICAgYXV0b1NsaWRlSW50ZXJ2YWw6IGFueTtcbiAgICBzaG93QXJyb3dCdXR0b246IGJvb2xlYW47XG4gICAgdGV4dERpcmVjdGlvbjogc3RyaW5nO1xuICAgIGltYWdlTWFyZ2luOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzd2lwZUNvb3JkPztcbiAgICBwcml2YXRlIHN3aXBlVGltZT87XG4gICAgc2xpZGVyTWFpbjogYW55O1xuICAgIGltYWdlRGl2OiBhbnk7XG4gICAgaW1hZ2VTaXplOiBhbnk7XG4gICAgaW5maW5pdGU6IGJvb2xlYW47XG4gICAgaW1hZ2VQb3B1cDogYm9vbGVhbjtcbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICBhbmltYXRpb25TcGVlZDogbnVtYmVyO1xuICAgIGltYWdlczogQXJyYXk8b2JqZWN0PjtcbiAgICBzbGlkZUltYWdlOiBhbnk7XG4gICAgYXV0b1NsaWRlOiBhbnk7XG4gICAgc2hvd0Fycm93OiBhbnk7XG4gICAgdmlkZW9BdXRvUGxheTogYm9vbGVhbjtcbiAgICBwYWdpbmF0aW9uU2hvdzogYm9vbGVhbjtcbiAgICBhcnJvd0tleU1vdmU6IGJvb2xlYW47XG4gICAgbWFuYWdlSW1hZ2VSYXRpbzogYm9vbGVhbjtcbiAgICBzaG93VmlkZW9Db250cm9sczogYm9vbGVhbjtcbiAgICBpbWFnZUNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBhcnJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBsaWdodGJveEFycm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxvYmplY3Q+O1xuICAgIGxpZ2h0Ym94Q2xvc2U6IEV2ZW50RW1pdHRlcjxvYmplY3Q+O1xuICAgIGxpZ3RoYm94U2hvdzogYm9vbGVhbjtcbiAgICBhY3RpdmVJbWFnZUluZGV4OiBudW1iZXI7XG4gICAgdmlzaWFibGVJbWFnZUluZGV4OiBudW1iZXI7XG4gICAgb25SZXNpemUoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBwbGF0Zm9ybUlkOiBPYmplY3QsIGltYWdlU2xpZGVyU2VydmljZTogTmdJbWFnZVNsaWRlclNlcnZpY2UsIGVsUmVmOiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgc2V0U2xpZGVySW1hZ2VzKGltZ09iajogYW55KTogdm9pZDtcbiAgICBzZXRTbGlkZXJXaWR0aCgpOiB2b2lkO1xuICAgIGltYWdlT25DbGljayhpbmRleDogYW55KTogdm9pZDtcbiAgICBpbWFnZUF1dG9TbGlkZSgpOiB2b2lkO1xuICAgIGltYWdlTW91c2VFbnRlckhhbmRsZXIoKTogdm9pZDtcbiAgICBwcmV2KCk6IHZvaWQ7XG4gICAgbmV4dCgpOiB2b2lkO1xuICAgIHByZXZJbWcoKTogdm9pZDtcbiAgICBuZXh0SW1nKCk6IHZvaWQ7XG4gICAgaW5maW5pdGVQcmV2SW1nKCk6IHZvaWQ7XG4gICAgaW5maW5pdGVOZXh0SW1nKCk6IHZvaWQ7XG4gICAgZ2V0VmlzaWFibGVJbmRleCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERpc2FibGUgc2xpZGVyIGxlZnQvcmlnaHQgYXJyb3cgd2hlbiBpbWFnZSBtb3ZpbmdcbiAgICAgKi9cbiAgICBzbGlkZXJBcnJvd0Rpc2FibGVUZWFtKCk6IHZvaWQ7XG4gICAgbmV4dFByZXZTbGlkZXJCdXR0b25EaXNhYmxlKCk6IHZvaWQ7XG4gICAgc2hvd0xpZ2h0Ym94KCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBsaWdodGJveEFycm93Q2xpY2tIYW5kbGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN3aXBlIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBSZWZlcmVuY2UgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDQ1MTEwMDcvMjA2NzY0NlxuICAgICAqL1xuICAgIHN3aXBlKGU6IFRvdWNoRXZlbnQsIHdoZW46IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=