import { ElementRef, Renderer2, OnInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, AfterViewInit } from '@angular/core';
import { ResizeHandle } from './widgets/resize-handle';
import { ResizeHandleType } from './models/resize-handle-type';
import { IResizeEvent } from './models/resize-event';
import * as ɵngcc0 from '@angular/core';
export declare class AngularResizableDirective implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    private el;
    private renderer;
    private _resizable;
    private _handles;
    private _handleType;
    private _handleResizing;
    private _direction;
    private _directionChanged;
    private _aspectRatio;
    private _containment;
    private _origMousePos;
    /** Original Size and Position */
    private _origSize;
    private _origPos;
    /** Current Size and Position */
    private _currSize;
    private _currPos;
    /** Initial Size and Position */
    private _initSize;
    private _initPos;
    /** Snap to gird */
    private _gridSize;
    private _bounding;
    /**
     * Bugfix: iFrames, and context unrelated elements block all events, and are unusable
     * https://github.com/xieziyu/angular2-draggable/issues/84
     */
    private _helperBlock;
    private draggingSub;
    private _adjusted;
    /** Disables the resizable if set to false. */
    ngResizable: any;
    /**
     * Which handles can be used for resizing.
     * @example
     * [rzHandles] = "'n,e,s,w,se,ne,sw,nw'"
     * equals to: [rzHandles] = "'all'"
     *
     * */
    rzHandles: ResizeHandleType;
    /**
     * Whether the element should be constrained to a specific aspect ratio.
     *  Multiple types supported:
     *  boolean: When set to true, the element will maintain its original aspect ratio.
     *  number: Force the element to maintain a specific aspect ratio during resizing.
     */
    rzAspectRatio: boolean | number;
    /**
     * Constrains resizing to within the bounds of the specified element or region.
     *  Multiple types supported:
     *  Selector: The resizable element will be contained to the bounding box of the first element found by the selector.
     *            If no element is found, no containment will be set.
     *  Element: The resizable element will be contained to the bounding box of this element.
     *  String: Possible values: "parent".
     */
    rzContainment: string | HTMLElement;
    /**
     * Snaps the resizing element to a grid, every x and y pixels.
     * A number for both width and height or an array values like [ x, y ]
     */
    rzGrid: number | number[];
    /** The minimum width the resizable should be allowed to resize to. */
    rzMinWidth: number;
    /** The minimum height the resizable should be allowed to resize to. */
    rzMinHeight: number;
    /** The maximum width the resizable should be allowed to resize to. */
    rzMaxWidth: number;
    /** The maximum height the resizable should be allowed to resize to. */
    rzMaxHeight: number;
    /** Whether to prevent default event */
    preventDefaultEvent: boolean;
    /** emitted when start resizing */
    rzStart: EventEmitter<IResizeEvent>;
    /** emitted when start resizing */
    rzResizing: EventEmitter<IResizeEvent>;
    /** emitted when stop resizing */
    rzStop: EventEmitter<IResizeEvent>;
    constructor(el: ElementRef<HTMLElement>, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /** A method to reset size */
    resetSize(): void;
    /** A method to get current status */
    getStatus(): {
        size: {
            width: number;
            height: number;
        };
        position: {
            top: number;
            left: number;
        };
    };
    private updateResizable;
    /** Use it to update aspect */
    private updateAspectRatio;
    /** Use it to update containment */
    private updateContainment;
    /** Use it to create handle divs */
    private createHandles;
    /** Use it to create a handle */
    private createHandleByType;
    private removeHandles;
    onMouseDown(event: MouseEvent | TouchEvent, handle: ResizeHandle): void;
    private subscribeEvents;
    private unsubscribeEvents;
    onMouseLeave(): void;
    onMouseMove(event: MouseEvent | TouchEvent): void;
    private startResize;
    private stopResize;
    private onResizing;
    private getResizingEvent;
    private updateDirection;
    private resizeTo;
    private doResize;
    private adjustByRatio;
    private checkBounds;
    private checkSize;
    private getBounding;
    private resetBounding;
    private getGridSize;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularResizableDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AngularResizableDirective, "[ngResizable]", ["ngResizable"], { "rzHandles": "rzHandles"; "rzAspectRatio": "rzAspectRatio"; "rzContainment": "rzContainment"; "rzGrid": "rzGrid"; "rzMinWidth": "rzMinWidth"; "rzMinHeight": "rzMinHeight"; "rzMaxWidth": "rzMaxWidth"; "rzMaxHeight": "rzMaxHeight"; "preventDefaultEvent": "preventDefaultEvent"; "ngResizable": "ngResizable"; }, { "rzStart": "rzStart"; "rzResizing": "rzResizing"; "rzStop": "rzStop"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1yZXNpemFibGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFuZ3VsYXItcmVzaXphYmxlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNpemVIYW5kbGUgfSBmcm9tICcuL3dpZGdldHMvcmVzaXplLWhhbmRsZSc7XG5pbXBvcnQgeyBSZXNpemVIYW5kbGVUeXBlIH0gZnJvbSAnLi9tb2RlbHMvcmVzaXplLWhhbmRsZS10eXBlJztcbmltcG9ydCB7IElSZXNpemVFdmVudCB9IGZyb20gJy4vbW9kZWxzL3Jlc2l6ZS1ldmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyUmVzaXphYmxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgX3Jlc2l6YWJsZTtcbiAgICBwcml2YXRlIF9oYW5kbGVzO1xuICAgIHByaXZhdGUgX2hhbmRsZVR5cGU7XG4gICAgcHJpdmF0ZSBfaGFuZGxlUmVzaXppbmc7XG4gICAgcHJpdmF0ZSBfZGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbkNoYW5nZWQ7XG4gICAgcHJpdmF0ZSBfYXNwZWN0UmF0aW87XG4gICAgcHJpdmF0ZSBfY29udGFpbm1lbnQ7XG4gICAgcHJpdmF0ZSBfb3JpZ01vdXNlUG9zO1xuICAgIC8qKiBPcmlnaW5hbCBTaXplIGFuZCBQb3NpdGlvbiAqL1xuICAgIHByaXZhdGUgX29yaWdTaXplO1xuICAgIHByaXZhdGUgX29yaWdQb3M7XG4gICAgLyoqIEN1cnJlbnQgU2l6ZSBhbmQgUG9zaXRpb24gKi9cbiAgICBwcml2YXRlIF9jdXJyU2l6ZTtcbiAgICBwcml2YXRlIF9jdXJyUG9zO1xuICAgIC8qKiBJbml0aWFsIFNpemUgYW5kIFBvc2l0aW9uICovXG4gICAgcHJpdmF0ZSBfaW5pdFNpemU7XG4gICAgcHJpdmF0ZSBfaW5pdFBvcztcbiAgICAvKiogU25hcCB0byBnaXJkICovXG4gICAgcHJpdmF0ZSBfZ3JpZFNpemU7XG4gICAgcHJpdmF0ZSBfYm91bmRpbmc7XG4gICAgLyoqXG4gICAgICogQnVnZml4OiBpRnJhbWVzLCBhbmQgY29udGV4dCB1bnJlbGF0ZWQgZWxlbWVudHMgYmxvY2sgYWxsIGV2ZW50cywgYW5kIGFyZSB1bnVzYWJsZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS94aWV6aXl1L2FuZ3VsYXIyLWRyYWdnYWJsZS9pc3N1ZXMvODRcbiAgICAgKi9cbiAgICBwcml2YXRlIF9oZWxwZXJCbG9jaztcbiAgICBwcml2YXRlIGRyYWdnaW5nU3ViO1xuICAgIHByaXZhdGUgX2FkanVzdGVkO1xuICAgIC8qKiBEaXNhYmxlcyB0aGUgcmVzaXphYmxlIGlmIHNldCB0byBmYWxzZS4gKi9cbiAgICBuZ1Jlc2l6YWJsZTogYW55O1xuICAgIC8qKlxuICAgICAqIFdoaWNoIGhhbmRsZXMgY2FuIGJlIHVzZWQgZm9yIHJlc2l6aW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogW3J6SGFuZGxlc10gPSBcIiduLGUscyx3LHNlLG5lLHN3LG53J1wiXG4gICAgICogZXF1YWxzIHRvOiBbcnpIYW5kbGVzXSA9IFwiJ2FsbCdcIlxuICAgICAqXG4gICAgICogKi9cbiAgICByekhhbmRsZXM6IFJlc2l6ZUhhbmRsZVR5cGU7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgZWxlbWVudCBzaG91bGQgYmUgY29uc3RyYWluZWQgdG8gYSBzcGVjaWZpYyBhc3BlY3QgcmF0aW8uXG4gICAgICogIE11bHRpcGxlIHR5cGVzIHN1cHBvcnRlZDpcbiAgICAgKiAgYm9vbGVhbjogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIGVsZW1lbnQgd2lsbCBtYWludGFpbiBpdHMgb3JpZ2luYWwgYXNwZWN0IHJhdGlvLlxuICAgICAqICBudW1iZXI6IEZvcmNlIHRoZSBlbGVtZW50IHRvIG1haW50YWluIGEgc3BlY2lmaWMgYXNwZWN0IHJhdGlvIGR1cmluZyByZXNpemluZy5cbiAgICAgKi9cbiAgICByekFzcGVjdFJhdGlvOiBib29sZWFuIHwgbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIENvbnN0cmFpbnMgcmVzaXppbmcgdG8gd2l0aGluIHRoZSBib3VuZHMgb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50IG9yIHJlZ2lvbi5cbiAgICAgKiAgTXVsdGlwbGUgdHlwZXMgc3VwcG9ydGVkOlxuICAgICAqICBTZWxlY3RvcjogVGhlIHJlc2l6YWJsZSBlbGVtZW50IHdpbGwgYmUgY29udGFpbmVkIHRvIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGZpcnN0IGVsZW1lbnQgZm91bmQgYnkgdGhlIHNlbGVjdG9yLlxuICAgICAqICAgICAgICAgICAgSWYgbm8gZWxlbWVudCBpcyBmb3VuZCwgbm8gY29udGFpbm1lbnQgd2lsbCBiZSBzZXQuXG4gICAgICogIEVsZW1lbnQ6IFRoZSByZXNpemFibGUgZWxlbWVudCB3aWxsIGJlIGNvbnRhaW5lZCB0byB0aGUgYm91bmRpbmcgYm94IG9mIHRoaXMgZWxlbWVudC5cbiAgICAgKiAgU3RyaW5nOiBQb3NzaWJsZSB2YWx1ZXM6IFwicGFyZW50XCIuXG4gICAgICovXG4gICAgcnpDb250YWlubWVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogU25hcHMgdGhlIHJlc2l6aW5nIGVsZW1lbnQgdG8gYSBncmlkLCBldmVyeSB4IGFuZCB5IHBpeGVscy5cbiAgICAgKiBBIG51bWJlciBmb3IgYm90aCB3aWR0aCBhbmQgaGVpZ2h0IG9yIGFuIGFycmF5IHZhbHVlcyBsaWtlIFsgeCwgeSBdXG4gICAgICovXG4gICAgcnpHcmlkOiBudW1iZXIgfCBudW1iZXJbXTtcbiAgICAvKiogVGhlIG1pbmltdW0gd2lkdGggdGhlIHJlc2l6YWJsZSBzaG91bGQgYmUgYWxsb3dlZCB0byByZXNpemUgdG8uICovXG4gICAgcnpNaW5XaWR0aDogbnVtYmVyO1xuICAgIC8qKiBUaGUgbWluaW11bSBoZWlnaHQgdGhlIHJlc2l6YWJsZSBzaG91bGQgYmUgYWxsb3dlZCB0byByZXNpemUgdG8uICovXG4gICAgcnpNaW5IZWlnaHQ6IG51bWJlcjtcbiAgICAvKiogVGhlIG1heGltdW0gd2lkdGggdGhlIHJlc2l6YWJsZSBzaG91bGQgYmUgYWxsb3dlZCB0byByZXNpemUgdG8uICovXG4gICAgcnpNYXhXaWR0aDogbnVtYmVyO1xuICAgIC8qKiBUaGUgbWF4aW11bSBoZWlnaHQgdGhlIHJlc2l6YWJsZSBzaG91bGQgYmUgYWxsb3dlZCB0byByZXNpemUgdG8uICovXG4gICAgcnpNYXhIZWlnaHQ6IG51bWJlcjtcbiAgICAvKiogV2hldGhlciB0byBwcmV2ZW50IGRlZmF1bHQgZXZlbnQgKi9cbiAgICBwcmV2ZW50RGVmYXVsdEV2ZW50OiBib29sZWFuO1xuICAgIC8qKiBlbWl0dGVkIHdoZW4gc3RhcnQgcmVzaXppbmcgKi9cbiAgICByelN0YXJ0OiBFdmVudEVtaXR0ZXI8SVJlc2l6ZUV2ZW50PjtcbiAgICAvKiogZW1pdHRlZCB3aGVuIHN0YXJ0IHJlc2l6aW5nICovXG4gICAgcnpSZXNpemluZzogRXZlbnRFbWl0dGVyPElSZXNpemVFdmVudD47XG4gICAgLyoqIGVtaXR0ZWQgd2hlbiBzdG9wIHJlc2l6aW5nICovXG4gICAgcnpTdG9wOiBFdmVudEVtaXR0ZXI8SVJlc2l6ZUV2ZW50PjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKiogQSBtZXRob2QgdG8gcmVzZXQgc2l6ZSAqL1xuICAgIHJlc2V0U2l6ZSgpOiB2b2lkO1xuICAgIC8qKiBBIG1ldGhvZCB0byBnZXQgY3VycmVudCBzdGF0dXMgKi9cbiAgICBnZXRTdGF0dXMoKToge1xuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgICB3aWR0aDogbnVtYmVyO1xuICAgICAgICAgICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgICAgIH07XG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICB0b3A6IG51bWJlcjtcbiAgICAgICAgICAgIGxlZnQ6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHByaXZhdGUgdXBkYXRlUmVzaXphYmxlO1xuICAgIC8qKiBVc2UgaXQgdG8gdXBkYXRlIGFzcGVjdCAqL1xuICAgIHByaXZhdGUgdXBkYXRlQXNwZWN0UmF0aW87XG4gICAgLyoqIFVzZSBpdCB0byB1cGRhdGUgY29udGFpbm1lbnQgKi9cbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRhaW5tZW50O1xuICAgIC8qKiBVc2UgaXQgdG8gY3JlYXRlIGhhbmRsZSBkaXZzICovXG4gICAgcHJpdmF0ZSBjcmVhdGVIYW5kbGVzO1xuICAgIC8qKiBVc2UgaXQgdG8gY3JlYXRlIGEgaGFuZGxlICovXG4gICAgcHJpdmF0ZSBjcmVhdGVIYW5kbGVCeVR5cGU7XG4gICAgcHJpdmF0ZSByZW1vdmVIYW5kbGVzO1xuICAgIG9uTW91c2VEb3duKGV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCwgaGFuZGxlOiBSZXNpemVIYW5kbGUpOiB2b2lkO1xuICAgIHByaXZhdGUgc3Vic2NyaWJlRXZlbnRzO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVFdmVudHM7XG4gICAgb25Nb3VzZUxlYXZlKCk6IHZvaWQ7XG4gICAgb25Nb3VzZU1vdmUoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIHN0YXJ0UmVzaXplO1xuICAgIHByaXZhdGUgc3RvcFJlc2l6ZTtcbiAgICBwcml2YXRlIG9uUmVzaXppbmc7XG4gICAgcHJpdmF0ZSBnZXRSZXNpemluZ0V2ZW50O1xuICAgIHByaXZhdGUgdXBkYXRlRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgcmVzaXplVG87XG4gICAgcHJpdmF0ZSBkb1Jlc2l6ZTtcbiAgICBwcml2YXRlIGFkanVzdEJ5UmF0aW87XG4gICAgcHJpdmF0ZSBjaGVja0JvdW5kcztcbiAgICBwcml2YXRlIGNoZWNrU2l6ZTtcbiAgICBwcml2YXRlIGdldEJvdW5kaW5nO1xuICAgIHByaXZhdGUgcmVzZXRCb3VuZGluZztcbiAgICBwcml2YXRlIGdldEdyaWRTaXplO1xufVxuIl19